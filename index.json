{"summary":{"main_topic":"Designing and Implementing Infrastructure for Serverless Web Applications","subtopics":["Infrastructure Design","Implementation","Methodology","Practices","Terraform Folder Structure","Folder Structure"]},"infrastructure_design":{"description":"The infrastructure will consist of separate VPCs for each environment (e.g., dev, qa, staging, prod), with Terraform used to provision the necessary infrastructure (e.g., VPCs, subnets, NAT gateways, etc.), SAM used to deploy Lambda functions to each environment, and Amplify used to deploy the frontend code to each environment."},"implementation":{"description":"LocalStack will be used for local development and testing purposes, with LocalStack configured to mimic the necessary AWS services required for the infrastructure."},"methodology":{"description":"Infrastructure will be created as code using Terraform and SAM, with configuration files stored in a separate git repository for version control and auditing purposes."},"practices":{"description":"A continuous integration/continuous deployment (CI/CD) pipeline will be set up to automate the deployment process for each environment. A list of completed tasks will be stored in a text file for reference in future runs."},"terraform_folder_structure":{"folders":[{"name":"networking","description":"Contain Terraform code to create VPCs, subnets, NAT gateways, etc."},{"name":"provisioning","description":"Contain Terraform code to create ECS, EKS, EC2 instances, etc."},{"name":"amplify","description":"Contain Terraform code to configure Amplify apps, jobs, and pull requests."},{"name":"keycloak","description":"Contain Terraform code to configure a Keycloak instance."},{"name":"shared","description":"Contain reusable modules such as database and utility modules."}]},"tasks":{"tasks":[{"number":1,"description":"Install necessary tools and dependencies","subtasks":[{"description":"Install Terraform using package manager or binary"},{"description":"Install Amplify CLI using npm or yarn"},{"description":"Install AWS CLI using package manager or binary"},{"description":"Install Keycloak using package manager or binary"},{"description":"Install Swagger using npm or other package manager"}],"branching_tasks":[]},{"number":2,"description":"Create environment-specific variables","subtasks":[{"description":"Create dev.tfvars file with necessary variables for dev environment"},{"description":"Create prod.tfvars file with necessary variables for prod environment"},{"description":"Create qa.tfvars file with necessary variables for qa environment"},{"description":"Create staging.tfvars file with necessary variables for staging environment"}],"branching_tasks":[]},{"number":3,"description":"Create networking resources","subtasks":[{"description":"Create virtual private cloud (VPC) with necessary configurations"},{"description":"Create internet gateway with necessary configurations"},{"description":"Create route table with necessary configurations"},{"description":"Create subnet with necessary configurations"}],"branching_tasks":[]},{"number":4,"description":"Create IAM roles","subtasks":[{"description":"Create IAM roles for dev environment with necessary policies"},{"description":"Create IAM roles for prod environment with necessary policies"},{"description":"Create IAM roles for qa environment with necessary policies"},{"description":"Create IAM roles for staging environment with necessary policies"}],"branching_tasks":[]},{"number":5,"description":"Create authentication and authorization modules","subtasks":[{"description":"Create Keycloak main.tf, variables.tf, and outputs.tf files with necessary components"},{"description":"Create Amplify main.tf, variables.tf, and outputs.tf files with necessary components"}],"branching_tasks":[]},{"number":6,"description":"Integrate Amplify lambdas with API gateway using openAPI and Swagger documentation","subtasks":[{"description":"Use Amplify CLI to automatically create lambda functions and API gateway resources based on Swagger definition"},{"description":"Use openAPI and Swagger documentation to integrate Amplify lambdas with API gateway"}],"branching_tasks":[]},{"number":7,"description":"Automate deployment of Terraform configurations using Bitbucket pipelines","subtasks":[{"description":"Define commands that execute each pipeline in build spec file"},{"description":"Invoke necessary AWS CLI commands to apply Terraform changes to correct environment"},{"description":"Use Bitbucket pipelines to deploy Terraform configuration changes automatically to respective environments"}],"branching_tasks":[]},{"number":8,"description":"Create and execute tests","subtasks":[{"description":"Create unit tests for each module"},{"description":"Create integration tests for the entire infrastructure"},{"description":"Execute tests using a test runner"},{"description":"Integrate tests into the CI/CD pipeline"}],"branching_tasks":[]}]},"current_progress":{"tasks_completed":[],"tasks_in_progress":[],"tasks_remaining":["Task 1","Task 3","Task 4","Task 6","Task 7","Task 8","Task 9","Task 10"]},"folder_structure":{"envs/":{"files":[{"name":"dev.tfvars","description":"Terraform variables file for the dev environment"},{"name":"prod.tfvars","description":"Terraform variables file for the prod environment"},{"name":"qa.tfvars","description":"Terraform variables file for the qa environment"},{"name":"staging.tfvars","description":"Terraform variables file for the staging environment"}]},"modules/":{"folders":[{"name":"amplify/","description":"Contains Terraform code to configure Amplify apps, jobs, and pull requests"},{"name":"keycloak/","description":"Contains Terraform code to configure a Keycloak instance"},{"name":"shared/","description":"Contains reusable modules such as database and utility modules"}],"files":[{"name":"main.tf","description":"Main Terraform configuration file for all modules"},{"name":"outputs.tf","description":"Terraform outputs file for all modules"},{"name":"variables.tf","description":"Terraform variables file for all modules"}]},"infrastructure/":{"folders":[{"name":"networking/","description":"Contains Terraform code to create VPCs, subnets, NAT gateways, etc."},{"name":"provisioning/","description":"Contains Terraform code to create ECS, EKS, EC2 instances, etc."}],"files":[]},"scripts/":{"folders":[{"name":"deploy/","description":"Contains deployment-related scripts"}],"files":[{"name":"generate-credentials.sh","description":"Bash script to generate AWS credentials for use with the AWS CLI"}]},"env-config.json":{"description":"JSON file containing environment-specific configuration settings such as database connection strings, API keys, etc."}, "mission_critical_data":  "[\n  {\"using that json as an index, cross reference it with sources from the internet, then revise the index and build a new one with much more detailed requirements and tasks, broken down into subtasks, assume the folder structure looks like whats described in the json and is strictly adhered to. the git repo is at\"},\n  {\"additional_data\":  \"Hello, LLM. As an experienced high-level architect and SRE/DevOps professional, you have been assigned a critical task. You will be working with a detailed index that outlines the design and implementation of a serverless web application infrastructure. This index is your roadmap, and it contains all the necessary steps, tasks, and subtasks required to successfully complete this project.Your mission is to consume this index, understand its structure, and use it as an instruction set to achieve the tasks outlined. The index is comprehensive and detailed, covering everything from infrastructure design, implementation, methodology, practices, to Terraform folder structure and tasks. It also includes a section on the current progress of the project, which will help you understand what has been completed, what is in progress, and what tasks remain.Each task in the index is broken down into subtasks and branching tasks to ensure a thorough understanding and execution. You are expected to follow these tasks meticulously and update the index after the completion of each task. This will ensure that the index remains a live document, reflecting the most current state of the project.Remember, you are not just executing tasks. You are also expected to bring your extensive experience and knowledge to this project. If you identify areas for improvement or optimization in the index, you should make the necessary adjustments. This could include refining tasks, adding more detail to subtasks, or even adding new tasks if necessary.In addition to the tasks, the index also includes a commands section. These are magic shortcuts or one-liners that can help you achieve some of the goals more efficiently. Make sure to use these commands where appropriate and feel free to add more commands if you find them useful.Finally, remember that this project is being built on a Linux machine. Make sure to consider this when executing tasks and writing commands.the index is in your working dir called index.json or it can be seen at the repo git@github.com:slapglif/infra-test.git - also, remember that you do not need to clone a repo, this is a new project from scratch, start by making a new directory for it and creating the required files - combine as many of the commands together as you can for example if you have to make 5 folders, use a single linxu command to make all 5.  if possible, use chat as much as you can to perform many actions and validate their result, attempt to do as much of this at once as possible with bash scripts and such\"},\n  {\"repo\":  \"git@github.com:slapglif/infra-test.git\"}\n]\n"}}
